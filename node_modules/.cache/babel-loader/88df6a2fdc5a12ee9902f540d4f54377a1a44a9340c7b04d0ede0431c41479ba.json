{"ast":null,"code":"var _jsxFileName = \"/Users/anhdaden/lighthouse/Udemy/React-Maxi/01-starting-project/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHanndler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n\n  // const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // const [formIsValid, setFormIsValid] = useState(false);\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // const enteredNameIsValid = enteredName.trim() !== '';\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  // useEffect(() => {\n  //   if (enteredNameIsValid) {\n  //     setFormIsValid(true);\n  //   } else {\n  //     setFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid]);\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  // const nameInputChangeHandler = event => {\n  //   setEnteredName(event.target.value);\n  // };\n\n  // const nameInputBlurHandler = event => {\n  //   setEnteredNameTouched(true);\n  // };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    // setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n    console.log(enteredName + ' ' + enteredEmail);\n\n    // setEnteredName('');\n    // setEnteredNameTouched(false);\n    resetNameInput();\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangedHandler,\n        onBlur: nameBlurHanndler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valid email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"p83rfMUZWn6BcES7ertF6brrapk=\", false, function () {\n  return [useInput];\n});\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useEffect","useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangedHandler","inputBlurHandler","nameBlurHanndler","reset","resetNameInput","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","includes","emailInputIsInvalid","formIsValid","emailInputChangeHandler","event","target","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses","emailInputClasses"],"sources":["/Users/anhdaden/lighthouse/Udemy/React-Maxi/01-starting-project/src/components/SimpleInput.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHanndler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n\n  // const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // const [formIsValid, setFormIsValid] = useState(false);\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // const enteredNameIsValid = enteredName.trim() !== '';\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  // useEffect(() => {\n  //   if (enteredNameIsValid) {\n  //     setFormIsValid(true);\n  //   } else {\n  //     setFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid]);\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  // const nameInputChangeHandler = event => {\n  //   setEnteredName(event.target.value);\n  // };\n\n  // const nameInputBlurHandler = event => {\n  //   setEnteredNameTouched(true);\n  // };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    // setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n    console.log(enteredName + ' ' + enteredEmail);\n\n    // setEnteredName('');\n    // setEnteredNameTouched(false);\n    resetNameInput();\n\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n  \n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\"; \n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          type='text' \n          id='name' \n          onChange={nameChangedHandler}\n          onBlur={nameBlurHanndler}\n          value={enteredName}\n        />\n        {nameInputHasError && <p className=\"error-text\">Name must not be empty.</p>}\n      </div>\n      <div className={emailInputClasses}>\n      <label htmlFor='email'>Email</label>\n        <input\n          type='text'\n          id='email'\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail} \n        />\n        {emailInputIsInvalid && <p className=\"error-text\">Please enter a valid email.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,oBAAoB;AAAC;AAE1C,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAA;EAE7B,MAAM;IACJC,KAAK,EAAEC,WAAW;IAClBC,OAAO,EAAEC,kBAAkB;IAC3BC,QAAQ,EAAEC,iBAAiB;IAC3BC,kBAAkB,EAAEC,kBAAkB;IACtCC,gBAAgB,EAAEC,gBAAgB;IAClCC,KAAK,EAAEC;EACT,CAAC,GAAGd,QAAQ,CAACG,KAAK,IAAIA,KAAK,CAACY,IAAI,EAAE,KAAK,EAAE,CAAC;;EAE1C;EACA;EACA;;EAEA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACmB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;;EAErE;EACA;;EAEA,MAAMqB,mBAAmB,GAAGJ,YAAY,CAACK,QAAQ,CAAC,GAAG,CAAC;EACtD,MAAMC,mBAAmB,GAAG,CAACF,mBAAmB,IAAIF,mBAAmB;;EAEvE;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIK,WAAW,GAAG,KAAK;EAEvB,IAAIjB,kBAAkB,IAAIc,mBAAmB,EAAE;IAC7CG,WAAW,GAAG,IAAI;EACpB;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,MAAMC,uBAAuB,GAAGC,KAAK,IAAI;IACvCR,eAAe,CAACQ,KAAK,CAACC,MAAM,CAACvB,KAAK,CAAC;EACrC,CAAC;EAED,MAAMwB,qBAAqB,GAAGF,KAAK,IAAI;IACrCN,sBAAsB,CAAC,IAAI,CAAC;EAC9B,CAAC;EAED,MAAMS,qBAAqB,GAAGH,KAAK,IAAI;IACrCA,KAAK,CAACI,cAAc,EAAE;;IAEtB;IACAV,sBAAsB,CAAC,IAAI,CAAC;IAE5B,IAAI,CAACb,kBAAkB,IAAI,CAACc,mBAAmB,EAAE;MAC/C;IACF;IACAU,OAAO,CAACC,GAAG,CAAC3B,WAAW,GAAG,GAAG,GAAGY,YAAY,CAAC;;IAE7C;IACA;IACAF,cAAc,EAAE;IAEhBG,eAAe,CAAC,EAAE,CAAC;IACnBE,sBAAsB,CAAC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMa,gBAAgB,GAAGxB,iBAAiB,GAAG,sBAAsB,GAAG,cAAc;EAEpF,MAAMyB,iBAAiB,GAAGX,mBAAmB,GAAG,sBAAsB,GAAG,cAAc;EAEvF,oBACE;IAAM,QAAQ,EAAEM,qBAAsB;IAAA,wBACpC;MAAK,SAAS,EAAEI,gBAAiB;MAAA,wBAC/B;QAAO,OAAO,EAAC,MAAM;QAAA,UAAC;MAAS;QAAA;QAAA;QAAA;MAAA,QAAQ,eACvC;QACE,IAAI,EAAC,MAAM;QACX,EAAE,EAAC,MAAM;QACT,QAAQ,EAAEtB,kBAAmB;QAC7B,MAAM,EAAEE,gBAAiB;QACzB,KAAK,EAAER;MAAY;QAAA;QAAA;QAAA;MAAA,QACnB,EACDI,iBAAiB,iBAAI;QAAG,SAAS,EAAC,YAAY;QAAA,UAAC;MAAuB;QAAA;QAAA;QAAA;MAAA,QAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACvE,eACN;MAAK,SAAS,EAAEyB,iBAAkB;MAAA,wBAClC;QAAO,OAAO,EAAC,OAAO;QAAA,UAAC;MAAK;QAAA;QAAA;QAAA;MAAA,QAAQ,eAClC;QACE,IAAI,EAAC,MAAM;QACX,EAAE,EAAC,OAAO;QACV,QAAQ,EAAET,uBAAwB;QAClC,MAAM,EAAEG,qBAAsB;QAC9B,KAAK,EAAEX;MAAa;QAAA;QAAA;QAAA;MAAA,QACpB,EACDM,mBAAmB,iBAAI;QAAG,SAAS,EAAC,YAAY;QAAA,UAAC;MAA2B;QAAA;QAAA;QAAA;MAAA,QAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7E,eACN;MAAK,SAAS,EAAC,cAAc;MAAA,uBAC3B;QAAQ,QAAQ,EAAE,CAACC,WAAY;QAAA,UAAC;MAAM;QAAA;QAAA;QAAA;MAAA;IAAS;MAAA;MAAA;MAAA;IAAA,QAC3C;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEX,CAAC;AAAC,GA1GItB,WAAW;EAAA,QASXD,QAAQ;AAAA;AAAA,KATRC,WAAW;AA4GjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}